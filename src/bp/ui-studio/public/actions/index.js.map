{"version":3,"sources":["../../src/actions/index.js"],"names":["createAction","axios","_","BatchRunner","requestFlows","receiveFlows","flows","receiveAt","Date","fetchFlows","dispatch","get","then","data","keyBy","requestSaveFlows","receiveSaveFlows","saveAllFlows","getState","values","flowsByName","map","flow","name","location","startNode","catchAll","links","nodes","skillData","timeoutNode","post","updateFlow","renameFlow","createFlow","switchFlow","deleteFlow","duplicateFlow","handleRefreshFlowLinks","refreshFlowsLinks","setTimeout","updateFlowNode","switchFlowNode","createFlowNode","removeFlowNode","copyFlowNode","pasteFlowNode","copyFlowNodeElement","pasteFlowNodeElement","openFlowNodeProps","closeFlowNodeProps","handleFlowEditorUndo","handleFlowEditorRedo","flowEditorUndo","flowEditorRedo","setDiagramAction","receiveContentCategories","fetchContentCategories","receiveContentItems","fetchContentItems","id","from","count","searchTerm","params","categoryId","receiveContentItemsRecent","fetchContentItemsRecent","orderBy","getBatchedContentItems","ids","join","reduce","acc","item","i","getBatchedContentRunner","getBatchedContentItem","add","getSingleContentItem","receiveContentItem","fetchContentItem","force","batched","content","itemsById","Promise","resolve","receiveContentItemsCount","fetchContentItemsCount","upsertContentItem","formData","modifyId","deleteContentItems","licenseChanged","fetchLicense","toggleLicenseModal","toggleAboutModal","viewModeChanged","updateGlobalStyle","userReceived","fetchUser","authEnabled","roles","res","botInfoReceived","fetchBotInformation","information","modulesReceived","fetchModules","allNotificationsReceived","newNotificationsReceived","fetchNotifications","replaceNotifications","allNotifications","addNotifications","notifications","buildNewSkill","cancelNewSkill","insertNewSkill","insertNewSkillNode","updateSkill","editSkill","requestEditSkill","nodeId","state","node","find","currentFlow","skillId","skill","flowName"],"mappings":"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","file":"index.js","sourcesContent":["import { createAction } from 'redux-actions'\nimport axios from 'axios'\nimport _ from 'lodash'\n\nimport BatchRunner from './BatchRunner'\n\n// Flows\nexport const requestFlows = createAction('FLOWS/REQUEST')\nexport const receiveFlows = createAction('FLOWS/RECEIVE', flows => flows, () => ({ receiveAt: new Date() }))\n\nexport const fetchFlows = () => dispatch => {\n  dispatch(requestFlows())\n\n  axios.get('/api/flows/all').then(({ data }) => {\n    const flows = _.keyBy(data, 'name')\n    dispatch(receiveFlows(flows))\n  })\n}\n\nexport const requestSaveFlows = createAction('FLOWS/SAVE')\nexport const receiveSaveFlows = createAction('FLOWS/SAVE/RECEIVE', flows => flows, () => ({ receiveAt: new Date() }))\n\nexport const saveAllFlows = () => (dispatch, getState) => {\n  dispatch(requestSaveFlows())\n\n  const flows = _.values(getState().flows.flowsByName).map(flow => ({\n    flow: flow.name,\n    location: flow.location,\n    startNode: flow.startNode,\n    catchAll: flow.catchAll,\n    links: flow.links,\n    nodes: flow.nodes,\n    skillData: flow.skillData,\n    timeoutNode: flow.timeoutNode\n  }))\n\n  axios.post('/api/flows/save', flows).then(() => {\n    dispatch(receiveSaveFlows())\n  })\n}\n\nexport const updateFlow = createAction('FLOWS/FLOW/UPDATE')\nexport const renameFlow = createAction('FLOWS/FLOW/RENAME')\nexport const createFlow = createAction('FLOWS/CREATE')\nexport const switchFlow = createAction('FLOWS/SWITCH')\nexport const deleteFlow = createAction('FLOWS/DELETE')\nexport const duplicateFlow = createAction('FLOWS/DUPLICATE')\nexport const handleRefreshFlowLinks = createAction('FLOWS/FLOW/UPDATE_LINKS')\nexport const refreshFlowsLinks = () => dispatch => setTimeout(() => dispatch(handleRefreshFlowLinks()), 10)\n\nexport const updateFlowNode = createAction('FLOWS/FLOW/UPDATE_NODE')\nexport const switchFlowNode = createAction('FLOWS/FLOW/SWITCH_NODE')\nexport const createFlowNode = createAction('FLOWS/FLOW/CREATE')\nexport const removeFlowNode = createAction('FLOWS/FLOW/REMOVE')\nexport const copyFlowNode = createAction('FLOWS/NODE/COPY')\nexport const pasteFlowNode = createAction('FLOWS/NODE/PASTE')\nexport const copyFlowNodeElement = createAction('FLOWS/NODE_ELEMENT/COPY')\nexport const pasteFlowNodeElement = createAction('FLOWS/NODE_ELEMENT/PASTE')\nexport const openFlowNodeProps = createAction('FLOWS/FLOW/OPEN_NODE_PROPS')\nexport const closeFlowNodeProps = createAction('FLOWS/FLOW/CLOSE_NODE_PROPS')\n\nexport const handleFlowEditorUndo = createAction('FLOWS/EDITOR/UNDO')\nexport const handleFlowEditorRedo = createAction('FLOWS/EDITOR/REDO')\n\nexport const flowEditorUndo = () => dispatch => {\n  dispatch(handleFlowEditorUndo())\n  dispatch(refreshFlowsLinks())\n}\n\nexport const flowEditorRedo = () => dispatch => {\n  dispatch(handleFlowEditorRedo())\n  dispatch(refreshFlowsLinks())\n}\n\nexport const setDiagramAction = createAction('FLOWS/FLOW/SET_ACTION')\n\n// Content\nexport const receiveContentCategories = createAction('CONTENT/CATEGORIES/RECEIVE')\nexport const fetchContentCategories = () => dispatch =>\n  axios.get('/api/content/categories').then(({ data }) => {\n    dispatch(receiveContentCategories(data))\n  })\n\nexport const receiveContentItems = createAction('CONTENT/ITEMS/RECEIVE')\nexport const fetchContentItems = ({ id, from, count, searchTerm }) => dispatch =>\n  axios\n    .get(`/api/content/items`, { params: { categoryId: id, from, count, searchTerm } })\n    .then(({ data }) => dispatch(receiveContentItems(data)))\n\nexport const receiveContentItemsRecent = createAction('CONTENT/ITEMS/RECEIVE_RECENT')\nexport const fetchContentItemsRecent = ({ searchTerm, count = 5, categoryId = 'all' }) => dispatch =>\n  axios\n    .get(`/api/content/items`, { params: { categoryId, count, searchTerm, orderBy: ['createdOn', 'desc'] } })\n    .then(({ data }) => dispatch(receiveContentItemsRecent(data)))\n\nconst getBatchedContentItems = ids =>\n  axios.get(`/api/content/items-batched/${ids.join(',')}`).then(({ data }) =>\n    data.reduce((acc, item, i) => {\n      acc[ids[i]] = item\n      return acc\n    }, {})\n  )\n\nconst getBatchedContentRunner = BatchRunner(getBatchedContentItems)\n\nconst getBatchedContentItem = id => getBatchedContentRunner.add(id)\n\nconst getSingleContentItem = id => axios.get(`/api/content/items/${id}`).then(({ data }) => data)\n\nexport const receiveContentItem = createAction('CONTENT/ITEMS/RECEIVE_ONE')\nexport const fetchContentItem = (id, { force = false, batched = false } = {}) => (dispatch, getState) => {\n  if (!id || (!force && getState().content.itemsById[id])) {\n    return Promise.resolve()\n  }\n  return (batched ? getBatchedContentItem(id) : getSingleContentItem(id)).then(data =>\n    dispatch(receiveContentItem(data))\n  )\n}\n\nexport const receiveContentItemsCount = createAction('CONTENT/ITEMS/RECEIVE_COUNT')\nexport const fetchContentItemsCount = (categoryId = 'all') => dispatch =>\n  axios\n    .get(`/api/content/items/count`, { params: { categoryId } })\n    .then(data => dispatch(receiveContentItemsCount(data)))\n\nexport const upsertContentItem = ({ categoryId, formData, modifyId }) => () =>\n  axios.post(`/api/content/categories/${categoryId}/items/${modifyId || ''}`, { formData })\n\nexport const deleteContentItems = data => () => axios.post('/api/content/categories/all/bulk_delete', data)\n\n// License\nexport const licenseChanged = createAction('LICENSE/CHANGED')\nexport const fetchLicense = () => dispatch => {\n  axios.get('/api/license').then(({ data }) => {\n    dispatch(licenseChanged(data))\n  })\n}\n\n// UI\nexport const toggleLicenseModal = createAction('UI/TOGGLE_LICENSE_MODAL')\nexport const toggleAboutModal = createAction('UI/TOGGLE_ABOUT_MODAL')\nexport const viewModeChanged = createAction('UI/VIEW_MODE_CHANGED')\nexport const updateGlobalStyle = createAction('UI/UPDATE_GLOBAL_STYLE')\n\n// User\nexport const userReceived = createAction('USER/RECEIVED')\nexport const fetchUser = authEnabled => dispatch => {\n  if (!authEnabled) {\n    dispatch(\n      userReceived({\n        id: 'anonymous',\n        roles: null\n      })\n    )\n    return\n  }\n  axios.get('/api/my-account').then(res => {\n    dispatch(userReceived(res.data))\n  })\n}\n\n// Bot\nexport const botInfoReceived = createAction('BOT/INFO_RECEIVED')\nexport const fetchBotInformation = () => dispatch => {\n  axios.get('/api/bot/information').then(information => {\n    dispatch(botInfoReceived(information.data))\n  })\n}\n\n// Modules\nexport const modulesReceived = createAction('MODULES/RECEIVED')\nexport const fetchModules = () => dispatch => {\n  axios.get('/api/modules').then(res => {\n    dispatch(modulesReceived(res.data))\n  })\n}\n\n// Notifications\nexport const allNotificationsReceived = createAction('NOTIFICATIONS/ALL_RECEIVED')\nexport const newNotificationsReceived = createAction('NOTIFICATIONS/NEW_RECEIVED')\nexport const fetchNotifications = () => dispatch => {\n  axios.get('/api/notifications/inbox').then(res => {\n    dispatch(allNotificationsReceived(res.data))\n  })\n}\n\nexport const replaceNotifications = allNotifications => dispatch => {\n  dispatch(allNotificationsReceived(allNotifications))\n}\n\nexport const addNotifications = notifications => dispatch => {\n  dispatch(newNotificationsReceived(notifications))\n}\n\n// Skills\nexport const buildNewSkill = createAction('SKILLS/BUILD')\nexport const cancelNewSkill = createAction('SKILLS/BUILD/CANCEL')\nexport const insertNewSkill = createAction('SKILLS/INSERT')\nexport const insertNewSkillNode = createAction('SKILLS/INSERT/NODE')\nexport const updateSkill = createAction('SKILLS/UPDATE')\n\nexport const editSkill = createAction('SKILLS/EDIT')\nexport const requestEditSkill = nodeId => (dispatch, getState) => {\n  const state = getState()\n  const node = _.find(state.flows.flowsByName[state.flows.currentFlow].nodes, { id: nodeId })\n  const flow = node && state.flows.flowsByName[node.flow]\n\n  flow &&\n    dispatch(\n      editSkill({\n        skillId: 'skill-' + node.skill,\n        flowName: node.flow,\n        nodeId: nodeId,\n        data: flow.skillData\n      })\n    )\n}\n"]}