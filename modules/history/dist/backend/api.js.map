{"version":3,"sources":["api.ts"],"names":["N_MESSAGE_GROUPS_READ","bp","db","router","http","createRouterForBot","get","req","res","botId","params","from","to","query","conversations","getDistinctConversations","buildConversationInfo","c","id","count","getConversationMessageCount","conversationsInfo","Promise","all","map","send","convId","flag","filters","messageGroups","getMessagesOfConversation","messageCount","messageGroupCount","getConversationMessageGroupCount","offset","clientCount","actualCount","unsyncOffset","Number","Math","max","post","body","messageIds","m","userMessage","flagMessages","sendStatus","delete","unflagMessages"],"mappings":"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","sourceRoot":"/Volumes/bp/botpress/modules/history/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\n\nimport { MessageGroup, QueryFilters } from '../typings'\n\nimport Database from './db'\n\nconst N_MESSAGE_GROUPS_READ = 10\n\nexport default async (bp: typeof sdk, db: Database) => {\n  const router = bp.http.createRouterForBot('history')\n\n  router.get('/conversations', async (req, res) => {\n    const { botId } = req.params\n    const { from, to } = req.query\n\n    const conversations: string[] = await db.getDistinctConversations(botId, from, to)\n\n    const buildConversationInfo = async (c: string) => ({ id: c, count: await db.getConversationMessageCount(c) })\n    const conversationsInfo = await Promise.all(conversations.map(buildConversationInfo))\n\n    res.send(conversationsInfo)\n  })\n\n  router.get('/messages/:convId', async (req, res) => {\n    const convId = req.params.convId\n    const { flag } = req.query\n\n    const filters: QueryFilters = { flag: flag === 'true' }\n    const messageGroups = await db.getMessagesOfConversation(convId, N_MESSAGE_GROUPS_READ, 0, filters)\n    const messageCount = await db.getConversationMessageCount(convId)\n    const messageGroupCount = await db.getConversationMessageGroupCount(convId, filters)\n\n    res.send({ messageGroups, messageCount, messageGroupCount })\n  })\n\n  router.get('/more-messages/:convId', async (req, res) => {\n    const convId = req.params.convId\n    const { offset, clientCount, flag } = req.query\n\n    const filters: QueryFilters = { flag: flag === 'true' }\n    const actualCount = await db.getConversationMessageGroupCount(convId, filters)\n    const unsyncOffset = Number(offset) + Math.max(actualCount - clientCount, 0)\n\n    const messageGroups = await db.getMessagesOfConversation(convId, N_MESSAGE_GROUPS_READ, unsyncOffset, filters)\n    res.send(messageGroups)\n  })\n\n  router.post('/flagged-messages', async (req, res) => {\n    const messageGroups: MessageGroup[] = req.body\n    const messageIds = messageGroups.map(m => m.userMessage.id)\n    await db.flagMessages(messageIds)\n    res.sendStatus(201)\n  })\n\n  router.delete('/flagged-messages', async (req, res) => {\n    const messageGroups = req.body\n    await db.unflagMessages(messageGroups)\n    res.sendStatus(201)\n  })\n}\n"]}