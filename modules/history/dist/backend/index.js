"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("bluebird-global");

const onServerStarted = async bp => {
  bp.database.createTableIfNotExists('msg_history', table => {
    table.increments('id').primary();
    table.date('created_on');
    table.string('thread_id');
    table.string('msg_content');
  });
};

const cleanDatabase = async (db, limitDate) => {
  // console.log(`clean database called with limit date = '${limitDate.toDateString()}' (${limitDate.getTime()})`)
  await db.table('msg_history').where('created_on', '<', limitDate.getTime()).del();
};

const onServerReady = async bp => {
  const router = bp.http.createRouterForBot('history');
  const globalConfig = await bp.config.getModuleConfig('history');
  router.get('/conversations/:from/:to', async (req, res) => {
    const from = req.params.from;
    const to = req.params.to;
    const limitDate = new Date(Date.now());
    limitDate.setDate(limitDate.getDate() - globalConfig.DatabaseEntryDaysToLive);
    cleanDatabase(bp.database, limitDate);
    const uniqueConversations = await bp.database.select().distinct('thread_id').where('created_on', '>=', from).where('created_on', '<=', to).whereNotNull('thread_id').table('msg_history').map(x => x.thread_id);
    res.send(uniqueConversations);
  });
  router.get('/messages/:convId', async (req, res) => {
    const convId = req.params.convId;
    const messages = await bp.database.select('msg_content').where('thread_id', convId).table('msg_history').map(x => JSON.parse(x.msg_content));
    res.send(messages);
  });
};

const onBotMount = async bp => {};

const onBotUnmount = async bp => {};

const onModuleUnmount = async bp => {};

const entryPoint = {
  onServerReady,
  onServerStarted,
  onBotMount,
  onBotUnmount,
  onModuleUnmount,
  definition: {
    name: 'history',
    fullName: 'History',
    homepage: 'https://botpress.io',
    menuIcon: 'history'
  }
};
var _default = entryPoint;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbIm9uU2VydmVyU3RhcnRlZCIsImJwIiwiZGF0YWJhc2UiLCJjcmVhdGVUYWJsZUlmTm90RXhpc3RzIiwidGFibGUiLCJpbmNyZW1lbnRzIiwicHJpbWFyeSIsImRhdGUiLCJzdHJpbmciLCJjbGVhbkRhdGFiYXNlIiwiZGIiLCJsaW1pdERhdGUiLCJ3aGVyZSIsImdldFRpbWUiLCJkZWwiLCJvblNlcnZlclJlYWR5Iiwicm91dGVyIiwiaHR0cCIsImNyZWF0ZVJvdXRlckZvckJvdCIsImdsb2JhbENvbmZpZyIsImNvbmZpZyIsImdldE1vZHVsZUNvbmZpZyIsImdldCIsInJlcSIsInJlcyIsImZyb20iLCJwYXJhbXMiLCJ0byIsIkRhdGUiLCJub3ciLCJzZXREYXRlIiwiZ2V0RGF0ZSIsIkRhdGFiYXNlRW50cnlEYXlzVG9MaXZlIiwidW5pcXVlQ29udmVyc2F0aW9ucyIsInNlbGVjdCIsImRpc3RpbmN0Iiwid2hlcmVOb3ROdWxsIiwibWFwIiwieCIsInRocmVhZF9pZCIsInNlbmQiLCJjb252SWQiLCJtZXNzYWdlcyIsIkpTT04iLCJwYXJzZSIsIm1zZ19jb250ZW50Iiwib25Cb3RNb3VudCIsIm9uQm90VW5tb3VudCIsIm9uTW9kdWxlVW5tb3VudCIsImVudHJ5UG9pbnQiLCJkZWZpbml0aW9uIiwibmFtZSIsImZ1bGxOYW1lIiwiaG9tZXBhZ2UiLCJtZW51SWNvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUtBLE1BQU1BLGVBQWUsR0FBRyxNQUFPQyxFQUFQLElBQTBCO0FBQ2hEQSxFQUFBQSxFQUFFLENBQUNDLFFBQUgsQ0FBWUMsc0JBQVosQ0FBbUMsYUFBbkMsRUFBa0RDLEtBQUssSUFBSTtBQUN6REEsSUFBQUEsS0FBSyxDQUFDQyxVQUFOLENBQWlCLElBQWpCLEVBQXVCQyxPQUF2QjtBQUNBRixJQUFBQSxLQUFLLENBQUNHLElBQU4sQ0FBVyxZQUFYO0FBQ0FILElBQUFBLEtBQUssQ0FBQ0ksTUFB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SnVDO0FBS3ZDQyxFQUFBQSxlQUx1QztBQU12Q0UsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLElBQUksRUFBRSxTQURJO0FBRVZDLElBQUFBLFFBQVEsRUFBRSxTQUZBO0FBR1ZDLElBQUFBLFFBQVEsRUFBRSxxQkFIQTtBQUlWQyxJQUFBQSxRQUFRLEVBQUU7QUFKQTtBQU4yQixDQUF6QztlQWNlTCxVIiwic291cmNlUm9vdCI6Ii9ob21lL2ZyYW5jb2lzL0RvY3VtZW50cy9ib3RwcmVzcy1yb290L2JvdHByZXNzL21vZHVsZXMvaGlzdG9yeS9zcmMvYmFja2VuZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnYmx1ZWJpcmQtZ2xvYmFsJ1xuaW1wb3J0ICogYXMgc2RrIGZyb20gJ2JvdHByZXNzL3NkaydcblxuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJ1xuXG5jb25zdCBvblNlcnZlclN0YXJ0ZWQgPSBhc3luYyAoYnA6IHR5cGVvZiBzZGspID0+IHtcbiAgYnAuZGF0YWJhc2UuY3JlYXRlVGFibGVJZk5vdEV4aXN0cygnbXNnX2hpc3RvcnknLCB0YWJsZSA9PiB7XG4gICAgdGFibGUuaW5jcmVtZW50cygnaWQnKS5wcmltYXJ5KClcbiAgICB0YWJsZS5kYXRlKCdjcmVhdGVkX29uJylcbiAgICB0YWJsZS5zdHJpbmcoJ3RocmVhZF9pZCcpXG4gICAgdGFibGUuc3RyaW5nKCdtc2dfY29udGVudCcpXG4gIH0pXG59XG5cbmNvbnN0IGNsZWFuRGF0YWJhc2UgPSBhc3luYyAoZGIsIGxpbWl0RGF0ZTogRGF0ZSkgPT4ge1xuICAvLyBjb25zb2xlLmxvZyhgY2xlYW4gZGF0YWJhc2UgY2FsbGVkIHdpdGggbGltaXQgZGF0ZSA9ICcke2xpbWl0RGF0ZS50b0RhdGVTdHJpbmcoKX0nICgke2xpbWl0RGF0ZS5nZXRUaW1lKCl9KWApXG4gIGF3YWl0IGRiXG4gICAgLnRhYmxlKCdtc2dfaGlzdG9yeScpXG4gICAgLndoZXJlKCdjcmVhdGVkX29uJywgJzwnLCBsaW1pdERhdGUuZ2V0VGltZSgpKVxuICAgIC5kZWwoKVxufVxuXG5jb25zdCBvblNlcnZlclJlYWR5ID0gYXN5bmMgKGJwOiB0eXBlb2Ygc2RrKSA9PiB7XG4gIGNvbnN0IHJvdXRlciA9IGJwLmh0dHAuY3JlYXRlUm91dGVyRm9yQm90KCdoaXN0b3J5JylcbiAgY29uc3QgZ2xvYmFsQ29uZmlnID0gKGF3YWl0IGJwLmNvbmZpZy5nZXRNb2R1bGVDb25maWcoJ2hpc3RvcnknKSkgYXMgQ29uZmlnXG5cbiAgcm91dGVyLmdldCgnL2NvbnZlcnNhdGlvbnMvOmZyb20vOnRvJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgZnJvbSA9IHJlcS5wYXJhbXMuZnJvbVxuICAgIGNvbnN0IHRvID0gcmVxLnBhcmFtcy50b1xuXG4gICAgY29uc3QgbGltaXREYXRlID0gbmV3IERhdGUoRGF0ZS5ub3coKSlcbiAgICBsaW1pdERhdGUuc2V0RGF0ZShsaW1pdERhdGUuZ2V0RGF0ZSgpIC0gZ2xvYmFsQ29uZmlnLkRhdGFiYXNlRW50cnlEYXlzVG9MaXZlKVxuXG4gICAgY2xlYW5EYXRhYmFzZShicC5kYXRhYmFzZSwgbGltaXREYXRlKVxuXG4gICAgY29uc3QgdW5pcXVlQ29udmVyc2F0aW9ucyA9IGF3YWl0IGJwLmRhdGFiYXNlXG4gICAgICAuc2VsZWN0KClcbiAgICAgIC5kaXN0aW5jdCgndGhyZWFkX2lkJylcbiAgICAgIC53aGVyZSgnY3JlYXRlZF9vbicsICc+PScsIGZyb20pXG4gICAgICAud2hlcmUoJ2NyZWF0ZWRfb24nLCAnPD0nLCB0bylcbiAgICAgIC53aGVyZU5vdE51bGwoJ3RocmVhZF9pZCcpXG4gICAgICAudGFibGUoJ21zZ19oaXN0b3J5JylcbiAgICAgIC5tYXAoeCA9PiB4LnRocmVhZF9pZClcblxuICAgIHJlcy5zZW5kKHVuaXF1ZUNvbnZlcnNhdGlvbnMpXG4gIH0pXG5cbiAgcm91dGVyLmdldCgnL21lc3NhZ2VzLzpjb252SWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCBjb252SWQgPSByZXEucGFyYW1zLmNvbnZJZFxuXG4gICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBicC5kYXRhYmFzZVxuICAgICAgLnNlbGVjdCgnbXNnX2NvbnRlbnQnKVxuICAgICAgLndoZXJlKCd0aHJlYWRfaWQnLCBjb252SWQpXG4gICAgICAudGFibGUoJ21zZ19oaXN0b3J5JylcbiAgICAgIC5tYXAoeCA9PiBKU09OLnBhcnNlKHgubXNnX2NvbnRlbnQpKVxuXG4gICAgcmVzLnNlbmQobWVzc2FnZXMpXG4gIH0pXG59XG5cbmNvbnN0IG9uQm90TW91bnQgPSBhc3luYyAoYnA6IHR5cGVvZiBzZGspID0+IHt9XG5cbmNvbnN0IG9uQm90VW5tb3VudCA9IGFzeW5jIChicDogdHlwZW9mIHNkaykgPT4ge31cblxuY29uc3Qgb25Nb2R1bGVVbm1vdW50ID0gYXN5bmMgKGJwOiB0eXBlb2Ygc2RrKSA9PiB7fVxuXG5jb25zdCBlbnRyeVBvaW50OiBzZGsuTW9kdWxlRW50cnlQb2ludCA9IHtcbiAgb25TZXJ2ZXJSZWFkeSxcbiAgb25TZXJ2ZXJTdGFydGVkLFxuICBvbkJvdE1vdW50LFxuICBvbkJvdFVubW91bnQsXG4gIG9uTW9kdWxlVW5tb3VudCxcbiAgZGVmaW5pdGlvbjoge1xuICAgIG5hbWU6ICdoaXN0b3J5JyxcbiAgICBmdWxsTmFtZTogJ0hpc3RvcnknLFxuICAgIGhvbWVwYWdlOiAnaHR0cHM6Ly9ib3RwcmVzcy5pbycsXG4gICAgbWVudUljb246ICdoaXN0b3J5J1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVudHJ5UG9pbnRcbiJdfQ==