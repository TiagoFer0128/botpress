"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("bluebird-global");

const onServerStarted = async bp => {
  console.log("on server started");
  bp.database.createTableIfNotExists("msg_history", table => {
    table.increments("id").primary();
    table.string("msg");
  });
};

const onServerReady = async bp => {
  let allBots;
  await bp.bots.getAllBots().then(v => {
    allBots = v;
  });
  let keys = [...allBots.keys()];
  console.log(`on server ready was called with bots ${keys}`);
  const router = bp.http.createRouterForBot('history');
  router.get('/msg', async (req, res) => {
    const messages = await bp.database.select('*').table("msg_history");
    res.send(messages);
  });
  console.log("router instanciated");
};

const onBotMount = async bp => {
  console.log("on bot mounted");
};

const onBotUnmount = async bp => {
  console.log("on server unmounted");
};

const onModuleUnmount = async bp => {
  console.log("on module unmount");
};

const entryPoint = {
  onServerReady,
  onServerStarted,
  onBotMount,
  onBotUnmount,
  onModuleUnmount,
  definition: {
    name: 'history',
    fullName: 'History',
    homepage: 'https://botpress.io',
    menuIcon: 'timeline'
  }
};
var _default = entryPoint;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbIm9uU2VydmVyU3RhcnRlZCIsImJwIiwiY29uc29sZSIsImxvZyIsImRhdGFiYXNlIiwiY3JlYXRlVGFibGVJZk5vdEV4aXN0cyIsInRhYmxlIiwiaW5jcmVtZW50cyIsInByaW1hcnkiLCJzdHJpbmciLCJvblNlcnZlclJlYWR5IiwiYWxsQm90cyIsImJvdHMiLCJnZXRBbGxCb3RzIiwidGhlbiIsInYiLCJrZXlzIiwicm91dGVyIiwiaHR0cCIsImNyZWF0ZVJvdXRlckZvckJvdCIsImdldCIsInJlcSIsInJlcyIsIm1lc3NhZ2VzIiwic2VsZWN0Iiwic2VuZCIsIm9uQm90TW91bnQiLCJvbkJvdFVubW91bnQiLCJvbk1vZHVsZVVubW91bnQiLCJlbnRyeVBvaW50IiwiZGVmaW5pdGlvbiIsIm5hbWUiLCJmdWxsTmFtZSIsImhvbWVwYWdlIiwibWVudUljb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFHQSxNQUFNQSxlQUFlLEdBQUcsTUFBT0MsRUFBUCxJQUEwQjtBQUNoREMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksbUJBQVo7QUFFQUYsRUFBQUEsRUFBRSxDQUFDRyxRQUFILENBQVlDLHNCQUFaLENBQW1DLGFBQW5DLEVBQWtEQyxLQUFLLElBQUk7QUFDekRBLElBQUFBLEtBQUssQ0FBQ0MsVUFBTixDQUFpQixJQUFqQixFQUF1QkMsT0FBdkI7QUFDQUYsSUFBQUEsS0FBSyxDQUFDRyxNQUFOLENBQWEsS0FBYjtBQUNELEdBSEQ7QUFJRCxDQVBEOztBQVNBLE1BQU1DLGFBQWEsR0FBRyxNQUFPVCxFQUFQLElBQTBCO0FBQzlDLE1BQUlVLE9BQUo7QUFDQSxRQUFNVixFQUFFLENBQUNXLElBQUgsQ0FBUUMsVUFBUixHQUFxQkMsSUFBckIsQ0FBMEJDLENBQUMsSUFBSTtBQUNuQ0osSUFBQUEsT0FBTyxHQUFHSSxDQUFWO0FBQ0QsR0FGSyxDQUFOO0FBR0EsTUFBSUMsSUFBYyxHQUFHLENBQUMsR0FBSUwsT0FBTyxDQUFDSyxJQUFSLEVBQUwsQ0FBckI7QUFDQWQsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsd0NBQXVDYSxJQUFLLEVBQXpEO0FBRUEsUUFBTUMsTUFBTSxHQUFHaEIsRUFBRSxDQUFDaUIsSUFBSCxDQUFRQyxrQkFBUixDQUEyQixTQUEzQixDQUFmO0FBRUFGLEVBQUFBLE1BQU0sQ0FBQ0csR0FBUCxDQUFXLE1BQVgsRUFBbUIsT0FBT0MsR0FBUCxFQUFZQyxHQUFaLEtBQW9CO0FBQ3JDLFVBQU1DLFFBQVEsR0FBRyxNQUFNdEIsRUFBRSxDQUFDRyxRQUFILENBQVlvQixNQUFaLENBQW1CLEdBQW5CLEVBQXdCbEIsS0FBeEIsQ0FBOEIsYUFBOUIsQ0FBdkI7QUFDQWdCLElBQUFBLEdBQUcsQ0FBQ0csSUFBSixDQUFTRixRQUFUO0FBQ0QsR0FIRDtBQUtBckIsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQVo7QUFDRCxDQWhCRDs7QUFrQkEsTUFBTXVCLFVBQVUsR0FBRyxNQUFPekIsRUFBUCxJQUEwQjtBQUMzQ0MsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZ0JBQVo7QUFDRCxDQUZEOztBQUlBLE1BQU13QixZQUFZLEdBQUcsTUFBTzFCLEVBQVAsSUFBMEI7QUFDN0NDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHFCQUFaO0FBQ0QsQ0FGRDs7QUFJQSxNQUFNeUIsZUFBZSxHQUFHLE1BQU8zQixFQUFQLElBQTBCO0FBQ2hEQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBWjtBQUNELENBRkQ7O0FBSUEsTUFBTTBCLFVBQWdDLEdBQUc7QUFDdkNuQixFQUFBQSxhQUR1QztBQUV2Q1YsRUFBQUEsZUFGdUM7QUFHdkMwQixFQUFBQSxVQUh1QztBQUl2Q0MsRUFBQUEsWUFKdUM7QUFLdkNDLEVBQUFBLGVBTHVDO0FBTXZDRSxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsSUFBSSxFQUFFLFNBREk7QUFFVkMsSUFBQUEsUUFBUSxFQUFFLFNBRkE7QUFHVkMsSUFBQUEsUUFBUSxFQUFFLHFCQUhBO0FBSVZDLElBQUFBLFFBQVEsRUFBRTtBQUpBO0FBTjJCLENBQXpDO2VBY2VMLFUiLCJzb3VyY2VSb290IjoiL2hvbWUvZnJhbmNvaXMvRG9jdW1lbnRzL2JvdHByZXNzLXJvb3QvYm90cHJlc3MvbW9kdWxlcy9oaXN0b3J5L3NyYy9iYWNrZW5kIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiYmx1ZWJpcmQtZ2xvYmFsXCJcbmltcG9ydCAqIGFzIHNkayBmcm9tICdib3RwcmVzcy9zZGsnXG5cbmNvbnN0IG9uU2VydmVyU3RhcnRlZCA9IGFzeW5jIChicDogdHlwZW9mIHNkaykgPT4ge1xuICBjb25zb2xlLmxvZyhcIm9uIHNlcnZlciBzdGFydGVkXCIpO1xuXG4gIGJwLmRhdGFiYXNlLmNyZWF0ZVRhYmxlSWZOb3RFeGlzdHMoXCJtc2dfaGlzdG9yeVwiLCB0YWJsZSA9PiB7XG4gICAgdGFibGUuaW5jcmVtZW50cyhcImlkXCIpLnByaW1hcnkoKVxuICAgIHRhYmxlLnN0cmluZyhcIm1zZ1wiKVxuICB9KVxufVxuXG5jb25zdCBvblNlcnZlclJlYWR5ID0gYXN5bmMgKGJwOiB0eXBlb2Ygc2RrKSA9PiB7XG4gIGxldCBhbGxCb3RzOiBNYXA8c3RyaW5nLCBzZGsuQm90Q29uZmlnPjtcbiAgYXdhaXQgYnAuYm90cy5nZXRBbGxCb3RzKCkudGhlbih2ID0+IHtcbiAgICBhbGxCb3RzID0gdjtcbiAgfSk7XG4gIGxldCBrZXlzOiBzdHJpbmdbXSA9IFsuLi4oYWxsQm90cy5rZXlzKCkpXVxuICBjb25zb2xlLmxvZyhgb24gc2VydmVyIHJlYWR5IHdhcyBjYWxsZWQgd2l0aCBib3RzICR7a2V5c31gKTtcblxuICBjb25zdCByb3V0ZXIgPSBicC5odHRwLmNyZWF0ZVJvdXRlckZvckJvdCgnaGlzdG9yeScpO1xuXG4gIHJvdXRlci5nZXQoJy9tc2cnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IGJwLmRhdGFiYXNlLnNlbGVjdCgnKicpLnRhYmxlKFwibXNnX2hpc3RvcnlcIilcbiAgICByZXMuc2VuZChtZXNzYWdlcyk7XG4gIH0pXG5cbiAgY29uc29sZS5sb2coXCJyb3V0ZXIgaW5zdGFuY2lhdGVkXCIpO1xufVxuXG5jb25zdCBvbkJvdE1vdW50ID0gYXN5bmMgKGJwOiB0eXBlb2Ygc2RrKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwib24gYm90IG1vdW50ZWRcIik7XG59XG5cbmNvbnN0IG9uQm90VW5tb3VudCA9IGFzeW5jIChicDogdHlwZW9mIHNkaykgPT4ge1xuICBjb25zb2xlLmxvZyhcIm9uIHNlcnZlciB1bm1vdW50ZWRcIik7XG59XG5cbmNvbnN0IG9uTW9kdWxlVW5tb3VudCA9IGFzeW5jIChicDogdHlwZW9mIHNkaykgPT4ge1xuICBjb25zb2xlLmxvZyhcIm9uIG1vZHVsZSB1bm1vdW50XCIpO1xufVxuXG5jb25zdCBlbnRyeVBvaW50OiBzZGsuTW9kdWxlRW50cnlQb2ludCA9IHtcbiAgb25TZXJ2ZXJSZWFkeSxcbiAgb25TZXJ2ZXJTdGFydGVkLFxuICBvbkJvdE1vdW50LFxuICBvbkJvdFVubW91bnQsXG4gIG9uTW9kdWxlVW5tb3VudCxcbiAgZGVmaW5pdGlvbjoge1xuICAgIG5hbWU6ICdoaXN0b3J5JyxcbiAgICBmdWxsTmFtZTogJ0hpc3RvcnknLFxuICAgIGhvbWVwYWdlOiAnaHR0cHM6Ly9ib3RwcmVzcy5pbycsXG4gICAgbWVudUljb246ICd0aW1lbGluZScsXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZW50cnlQb2ludCJdfQ==