"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("bluebird-global");

const onServerStarted = async bp => {
  bp.database.createTableIfNotExists('msg_history', table => {
    table.increments('id').primary();
    table.date('created_on');
    table.string('thread_id');
    table.string('msg_content');
  });
};

const cleanDatabase = async (db, limitDate) => {
  console.log(`clean database called with limit date = '${limitDate.toDateString()}' (${limitDate.getTime()})`);
  await db.table('msg_history').where('created_on', '<', limitDate.getTime()).del();
};

const onServerReady = async bp => {
  const router = bp.http.createRouterForBot('history');
  const globalConfig = await bp.config.getModuleConfig('history');
  router.get('/conversations/:from/:to', async (req, res) => {
    const from = req.params.from;
    const to = req.params.to;
    const limitDate = new Date(Date.now());
    limitDate.setDate(limitDate.getDate() - globalConfig.DatabaseEntryDaysToLive);
    cleanDatabase(bp.database, limitDate);
    const uniqueConversations = await bp.database.select().distinct('thread_id').where('created_on', '>=', from).where('created_on', '<=', to).whereNotNull('thread_id').table('msg_history').map(x => x.thread_id);
    res.send(uniqueConversations);
  });
  router.get('/messages/:convId', async (req, res) => {
    const convId = req.params.convId;
    const messages = await bp.database.select('msg_content').where('thread_id', convId).table('msg_history').map(x => JSON.parse(x.msg_content));
    res.send(messages);
  });
};

const onBotMount = async bp => {};

const onBotUnmount = async bp => {};

const onModuleUnmount = async bp => {};

const entryPoint = {
  onServerReady,
  onServerStarted,
  onBotMount,
  onBotUnmount,
  onModuleUnmount,
  definition: {
    name: 'history',
    fullName: 'History',
    homepage: 'https://botpress.io',
    menuIcon: 'history'
  }
};
var _default = entryPoint;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbIm9uU2VydmVyU3RhcnRlZCIsImJwIiwiZGF0YWJhc2UiLCJjcmVhdGVUYWJsZUlmTm90RXhpc3RzIiwidGFibGUiLCJpbmNyZW1lbnRzIiwicHJpbWFyeSIsImRhdGUiLCJzdHJpbmciLCJjbGVhbkRhdGFiYXNlIiwiZGIiLCJsaW1pdERhdGUiLCJjb25zb2xlIiwibG9nIiwidG9EYXRlU3RyaW5nIiwiZ2V0VGltZSIsIndoZXJlIiwiZGVsIiwib25TZXJ2ZXJSZWFkeSIsInJvdXRlciIsImh0dHAiLCJjcmVhdGVSb3V0ZXJGb3JCb3QiLCJnbG9iYWxDb25maWciLCJjb25maWciLCJnZXRNb2R1bGVDb25maWciLCJnZXQiLCJyZXEiLCJyZXMiLCJmcm9tIiwicGFyYW1zIiwidG8iLCJEYXRlIiwibm93Iiwic2V0RGF0ZSIsImdldERhdGUiLCJEYXRhYmFzZUVudHJ5RGF5c1RvTGl2ZSIsInVuaXF1ZUNvbnZlcnNhdGlvbnMiLCJzZWxlY3QiLCJkaXN0aW5jdCIsIndoZXJlTm90TnVsbCIsIm1hcCIsIngiLCJ0aHJlYWRfaWQiLCJzZW5kIiwiY29udklkIiwibWVzc2FnZXMiLCJKU09OIiwicGFyc2UiLCJtc2dfY29udGVudCIsIm9uQm90TW91bnQiLCJvbkJvdFVubW91bnQiLCJvbk1vZHVsZVVubW91bnQiLCJlbnRyeVBvaW50IiwiZGVmaW5pdGlvbiIsIm5hbWUiLCJmdWxsTmFtZSIsImhvbWVwYWdlIiwibWVudUljb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFLQSxNQUFNQSxlQUFlLEdBQUcsTUFBT0MsRUFBUCxJQUEwQjtBQUNoREEsRUFBQUEsRUFBRSxDQUFDQyxRQUFILENBQVlDLHNCQUFaLENBQW1DLGFBQW5DLEVBQWtEQyxLQUFLLElBQUk7QUFDekRBLElBQUFBLEtBQUssQ0FBQ0MsVUFBTixDQUFpQixJQUFqQixFQUF1QkMsT0FBdkI7QUFDQUYsSUFBQUEsS0FBSyxDQUFDRyxJQUFOLENBQVcsWUFBWDtBQUNBSCxJQUFBQSxLQUFLLENBQUNJLE1BQU4sQ0FBYSxXQUFiO0FBQ0FKLElBQUFBLEtBQUssQ0FBQ0ksTUFBTixDQUFhLGFBQWI7QUFDRCxHQUxEO0FBTUQsQ0FQRDs7QUFTQSxNQUFNQyxhQUFhLEdBQUcsT0FBT0MsRUFBUCxFQUFXQyxTQUFYLEtBQStCO0FBQ25EQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSw0Q0FBMkNGLFNBQVMsQ0FBQ0csWUFBVixFQUF5QixNQUFLSCxTQUFTLENBQUNJLE9BQVYsRUFBb0IsR0FBMUc7QUFDQSxRQUFNTCxFQUFFLENBQ0xOLEtBREcsQ0FDRyxhQURILEVBRUhZLEtBRkcsQ0FFRyxZQUZILEVBRWlCLEdBRmpCLEVBRXNCTCxTQUFTLENBQUNJLE9BQVYsRUFGdEIsRUFHSEUsR0FIRyxFQUFOO0FBSUQsQ0FORDs7QUFRQSxNQUFNQyxhQUFhLEdBQUcsTUFBT2pCLEVBQVAsSUFBMEI7QUFDOUMsUUFBTWtCLE1BQU0sR0FBR2xCLEVBQUUsQ0FBQ21CLElBQUgsQ0FBUUMsa0JBQVIsQ0FBMkIsU0FBM0IsQ0FBZjtBQUNBLFFBQU1DLFlBQVksR0FBSSxNQUFNckIsRUFBRSxDQUFDc0IsTUFBSCxDQUFVQyxlQUFWLENBQTBCLFNBQTFCLENBQTVCO0FBRUFMLEVBQUFBLE1BQU0sQ0FBQ00sR0FBUCxDQUFXLDBCQUFYLEVBQXVDLE9BQU9DLEdBQVAsRUFBWUMsR0FBWixLQUFvQjtBQUN6RCxVQUFNQyxJQUFJLEdBQUdGLEdBQUcsQ0FBQ0csTUFBSixDQUFXRCxJQUF4QjtBQUNBLFVBQU1FLEVBQUUsR0FBR0osR0FBRyxDQUFDRyxNQUFKLENBQVdDLEVBQXRCO0FBRUEsVUFBTW5CLFNBQVMsR0FBRyxJQUFJb0IsSUFBSixDQUFTQSxJQUFJLENBQUNDLEdBQUwsRUFBVCxDQUFsQjtBQUNBckIsSUFBQUEsU0FBUyxDQUFDc0IsT0FBVixDQUFrQnRCLFNBQVMsQ0FBQ3VCLE9BQVYsS0FBc0JaLFlBQVksQ0FBQ2EsdUJBQXJEO0FBRUExQixJQUFBQSxhQUFhLENBQUNSLEVBQUUsQ0FBQ0MsUUFBSixFQUFjUyxTQUFkLENBQWI7QUFFQSxVQUFNeUIsbUJBQW1CLEdBQUcsTUFBTW5DLEVBQUUsQ0FBQ0MsUUFBSCxDQUMvQm1DLE1BRCtCLEdBRS9CQyxRQUYrQixDQUV0QixXQUZzQixFQUcvQnRCLEtBSCtCLENBR3pCLFlBSHlCLEVBR1gsSUFIVyxFQUdMWSxJQUhLLEVBSS9CWixLQUorQixDQUl6QixZQUp5QixFQUlYLElBSlcsRUFJTGMsRUFKSyxFQUsvQlMsWUFMK0IsQ0FLbEIsV0FMa0IsRUFNL0JuQyxLQU4rQixDQU16QixhQU55QixFQU8vQm9DLEdBUCtCLENBTzNCQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsU0FQb0IsQ0FBbEM7QUFTQWYsSUFBQUEsR0FBRyxDQUFDZ0IsSUFBSixDQUFTUCxtQkFBVDtBQUNELEdBbkJEO0FBcUJBakIsRUFBQUEsTUFBTSxDQUFDTSxHQUFQLENBQVcsbUJBQVgsRUFBZ0MsT0FBT0MsR0FBUCxFQUFZQyxHQUFaLEtBQW9CO0FBQ2xELFVBQU1pQixNQUFNLEdBQUdsQixHQUFHLENBQUNHLE1BQUosQ0FBV2UsTUFBMUI7QUFFQSxVQUFNQyxRQUFRLEdBQUcsTUFBTTVDLEVBQUUsQ0FBQ0MsUUFBSCxDQUNwQm1DLE1BRG9CLENBQ2IsYUFEYSxFQUVwQnJCLEtBRm9CLENBRWQsV0FGYyxFQUVENEIsTUFGQyxFQUdwQnhDLEtBSG9CLENBR2QsYUFIYyxFQUlwQm9DLEdBSm9CLENBSWhCQyxDQUFDLElBQUlLLElBQUksQ0FBQ0MsS0FBTCxDQUFXTixDQUFDLENBQUNPLFdBQWIsQ0FKVyxDQUF2QjtBQU1BckIsSUFBQUEsR0FBRyxDQUFDZ0IsSUFBSixDQUFTRSxRQUFUO0FBQ0QsR0FWRDtBQVdELENBcENEOztBQXNDQSxNQUFNSSxVQUFVLEdBQUcsTUFBT2hELEVBQVAsSUFBMEIsQ0FBRSxDQUEvQzs7QUFFQSxNQUFNaUQsWUFBWSxHQUFHLE1BQU9qRCxFQUFQLElBQTBCLENBQUUsQ0FBakQ7O0FBRUEsTUFBTWtELGVBQWUsR0FBRyxNQUFPbEQsRUFBUCxJQUEwQixDQUFFLENBQXBEOztBQUVBLE1BQU1tRCxVQUFnQyxHQUFHO0FBQ3ZDbEMsRUFBQUEsYUFEdUM7QUFFdkNsQixFQUFBQSxlQUZ1QztBQUd2Q2lELEVBQUFBLFVBSHVDO0FBSXZDQyxFQUFBQSxZQUp1QztBQUt2Q0MsRUFBQUEsZUFMdUM7QUFNdkNFLEVBQUFBLFVBQVUsRUFBRTtBQUNWQyxJQUFBQSxJQUFJLEVBQUUsU0FESTtBQUVWQyxJQUFBQSxRQUFRLEVBQUUsU0FGQTtBQUdWQyxJQUFBQSxRQUFRLEVBQUUscUJBSEE7QUFJVkMsSUFBQUEsUUFBUSxFQUFFO0FBSkE7QUFOMkIsQ0FBekM7ZUFjZUwsVSIsInNvdXJjZVJvb3QiOiIvaG9tZS9mcmFuY29pcy9Eb2N1bWVudHMvYm90cHJlc3Mtcm9vdC9ib3RwcmVzcy9tb2R1bGVzL2hpc3Rvcnkvc3JjL2JhY2tlbmQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2JsdWViaXJkLWdsb2JhbCdcbmltcG9ydCAqIGFzIHNkayBmcm9tICdib3RwcmVzcy9zZGsnXG5cbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZydcblxuY29uc3Qgb25TZXJ2ZXJTdGFydGVkID0gYXN5bmMgKGJwOiB0eXBlb2Ygc2RrKSA9PiB7XG4gIGJwLmRhdGFiYXNlLmNyZWF0ZVRhYmxlSWZOb3RFeGlzdHMoJ21zZ19oaXN0b3J5JywgdGFibGUgPT4ge1xuICAgIHRhYmxlLmluY3JlbWVudHMoJ2lkJykucHJpbWFyeSgpXG4gICAgdGFibGUuZGF0ZSgnY3JlYXRlZF9vbicpXG4gICAgdGFibGUuc3RyaW5nKCd0aHJlYWRfaWQnKVxuICAgIHRhYmxlLnN0cmluZygnbXNnX2NvbnRlbnQnKVxuICB9KVxufVxuXG5jb25zdCBjbGVhbkRhdGFiYXNlID0gYXN5bmMgKGRiLCBsaW1pdERhdGU6IERhdGUpID0+IHtcbiAgY29uc29sZS5sb2coYGNsZWFuIGRhdGFiYXNlIGNhbGxlZCB3aXRoIGxpbWl0IGRhdGUgPSAnJHtsaW1pdERhdGUudG9EYXRlU3RyaW5nKCl9JyAoJHtsaW1pdERhdGUuZ2V0VGltZSgpfSlgKVxuICBhd2FpdCBkYlxuICAgIC50YWJsZSgnbXNnX2hpc3RvcnknKVxuICAgIC53aGVyZSgnY3JlYXRlZF9vbicsICc8JywgbGltaXREYXRlLmdldFRpbWUoKSlcbiAgICAuZGVsKClcbn1cblxuY29uc3Qgb25TZXJ2ZXJSZWFkeSA9IGFzeW5jIChicDogdHlwZW9mIHNkaykgPT4ge1xuICBjb25zdCByb3V0ZXIgPSBicC5odHRwLmNyZWF0ZVJvdXRlckZvckJvdCgnaGlzdG9yeScpXG4gIGNvbnN0IGdsb2JhbENvbmZpZyA9IChhd2FpdCBicC5jb25maWcuZ2V0TW9kdWxlQ29uZmlnKCdoaXN0b3J5JykpIGFzIENvbmZpZ1xuXG4gIHJvdXRlci5nZXQoJy9jb252ZXJzYXRpb25zLzpmcm9tLzp0bycsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIGNvbnN0IGZyb20gPSByZXEucGFyYW1zLmZyb21cbiAgICBjb25zdCB0byA9IHJlcS5wYXJhbXMudG9cblxuICAgIGNvbnN0IGxpbWl0RGF0ZSA9IG5ldyBEYXRlKERhdGUubm93KCkpXG4gICAgbGltaXREYXRlLnNldERhdGUobGltaXREYXRlLmdldERhdGUoKSAtIGdsb2JhbENvbmZpZy5EYXRhYmFzZUVudHJ5RGF5c1RvTGl2ZSlcblxuICAgIGNsZWFuRGF0YWJhc2UoYnAuZGF0YWJhc2UsIGxpbWl0RGF0ZSlcblxuICAgIGNvbnN0IHVuaXF1ZUNvbnZlcnNhdGlvbnMgPSBhd2FpdCBicC5kYXRhYmFzZVxuICAgICAgLnNlbGVjdCgpXG4gICAgICAuZGlzdGluY3QoJ3RocmVhZF9pZCcpXG4gICAgICAud2hlcmUoJ2NyZWF0ZWRfb24nLCAnPj0nLCBmcm9tKVxuICAgICAgLndoZXJlKCdjcmVhdGVkX29uJywgJzw9JywgdG8pXG4gICAgICAud2hlcmVOb3ROdWxsKCd0aHJlYWRfaWQnKVxuICAgICAgLnRhYmxlKCdtc2dfaGlzdG9yeScpXG4gICAgICAubWFwKHggPT4geC50aHJlYWRfaWQpXG5cbiAgICByZXMuc2VuZCh1bmlxdWVDb252ZXJzYXRpb25zKVxuICB9KVxuXG4gIHJvdXRlci5nZXQoJy9tZXNzYWdlcy86Y29udklkJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgY29uc3QgY29udklkID0gcmVxLnBhcmFtcy5jb252SWRcblxuICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgYnAuZGF0YWJhc2VcbiAgICAgIC5zZWxlY3QoJ21zZ19jb250ZW50JylcbiAgICAgIC53aGVyZSgndGhyZWFkX2lkJywgY29udklkKVxuICAgICAgLnRhYmxlKCdtc2dfaGlzdG9yeScpXG4gICAgICAubWFwKHggPT4gSlNPTi5wYXJzZSh4Lm1zZ19jb250ZW50KSlcblxuICAgIHJlcy5zZW5kKG1lc3NhZ2VzKVxuICB9KVxufVxuXG5jb25zdCBvbkJvdE1vdW50ID0gYXN5bmMgKGJwOiB0eXBlb2Ygc2RrKSA9PiB7fVxuXG5jb25zdCBvbkJvdFVubW91bnQgPSBhc3luYyAoYnA6IHR5cGVvZiBzZGspID0+IHt9XG5cbmNvbnN0IG9uTW9kdWxlVW5tb3VudCA9IGFzeW5jIChicDogdHlwZW9mIHNkaykgPT4ge31cblxuY29uc3QgZW50cnlQb2ludDogc2RrLk1vZHVsZUVudHJ5UG9pbnQgPSB7XG4gIG9uU2VydmVyUmVhZHksXG4gIG9uU2VydmVyU3RhcnRlZCxcbiAgb25Cb3RNb3VudCxcbiAgb25Cb3RVbm1vdW50LFxuICBvbk1vZHVsZVVubW91bnQsXG4gIGRlZmluaXRpb246IHtcbiAgICBuYW1lOiAnaGlzdG9yeScsXG4gICAgZnVsbE5hbWU6ICdIaXN0b3J5JyxcbiAgICBob21lcGFnZTogJ2h0dHBzOi8vYm90cHJlc3MuaW8nLFxuICAgIG1lbnVJY29uOiAnaGlzdG9yeSdcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBlbnRyeVBvaW50XG4iXX0=