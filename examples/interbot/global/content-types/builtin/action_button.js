//CHECKSUM:17c945a2d75c6a878e2115e6bbf8bc0dc2222f61ec90f90c87c7882ab6a40d33
"use strict";

const base = require('./_base');

function renderElement(data, channel) {
  // We don't render action button
  return [];
}

module.exports = {
  id: 'builtin_action-button',
  group: 'Built-in Messages',
  title: 'Action Button',
  jsonSchema: {
    description: 'A button that triggers an action, often used in cards',
    type: 'object',
    required: ['action', 'title'],
    properties: {
      title: {
        type: 'string',
        description: 'Title of the button'
      },
      action: {
        type: 'string',
        enum: ['Say something', 'Open URL', 'Postback'],
        default: 'Say something'
      }
    },
    dependencies: {
      action: {
        oneOf: [{
          properties: {
            action: {
              enum: ['Say something']
            }
          }
        }, {
          properties: {
            action: {
              enum: ['Open URL']
            },
            url: {
              type: 'string',
              title: 'Enter a valid URL'
            }
          },
          required: ['url']
        }, {
          properties: {
            action: {
              enum: ['Postback']
            },
            payload: {
              type: 'string'
            }
          },
          required: ['payload']
        }]
      }
    }
  },
  uiSchema: {},
  computePreviewText: formData => `Action: ${formData.action}`,
  renderElement: renderElement,
  hidden: true
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGlvbl9idXR0b24uanMiXSwibmFtZXMiOlsiYmFzZSIsInJlcXVpcmUiLCJyZW5kZXJFbGVtZW50IiwiZGF0YSIsImNoYW5uZWwiLCJtb2R1bGUiLCJleHBvcnRzIiwiaWQiLCJncm91cCIsInRpdGxlIiwianNvblNjaGVtYSIsImRlc2NyaXB0aW9uIiwidHlwZSIsInJlcXVpcmVkIiwicHJvcGVydGllcyIsImFjdGlvbiIsImVudW0iLCJkZWZhdWx0IiwiZGVwZW5kZW5jaWVzIiwib25lT2YiLCJ1cmwiLCJwYXlsb2FkIiwidWlTY2hlbWEiLCJjb21wdXRlUHJldmlld1RleHQiLCJmb3JtRGF0YSIsImhpZGRlbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXBCOztBQUVBLFNBQVNDLGFBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxPQUE3QixFQUFzQztBQUNwQztBQUNBLFNBQU8sRUFBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsRUFBQUEsRUFBRSxFQUFFLHVCQURXO0FBRWZDLEVBQUFBLEtBQUssRUFBRSxtQkFGUTtBQUdmQyxFQUFBQSxLQUFLLEVBQUUsZUFIUTtBQUtmQyxFQUFBQSxVQUFVLEVBQUU7QUFDVkMsSUFBQUEsV0FBVyxFQUFFLHVEQURIO0FBRVZDLElBQUFBLElBQUksRUFBRSxRQUZJO0FBR1ZDLElBQUFBLFFBQVEsRUFBRSxDQUFDLFFBQUQsRUFBVyxPQUFYLENBSEE7QUFJVkMsSUFBQUEsVUFBVSxFQUFFO0FBQ1ZMLE1BQUFBLEtBQUssRUFBRTtBQUNMRyxRQUFBQSxJQUFJLEVBQUUsUUFERDtBQUVMRCxRQUFBQSxXQUFXLEVBQUU7QUFGUixPQURHO0FBS1ZJLE1BQUFBLE1BQU0sRUFBRTtBQUNOSCxRQUFBQSxJQUFJLEVBQUUsUUFEQTtBQUVOSSxRQUFBQSxJQUFJLEVBQUUsQ0FBQyxlQUFELEVBQWtCLFVBQWxCLEVBQThCLFVBQTlCLENBRkE7QUFHTkMsUUFBQUEsT0FBTyxFQUFFO0FBSEg7QUFMRSxLQUpGO0FBZVZDLElBQUFBLFlBQVksRUFBRTtBQUNaSCxNQUFBQSxNQUFNLEVBQUU7QUFDTkksUUFBQUEsS0FBSyxFQUFFLENBQ0w7QUFDRUwsVUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLFlBQUFBLE1BQU0sRUFBRTtBQUNOQyxjQUFBQSxJQUFJLEVBQUUsQ0FBQyxlQUFEO0FBREE7QUFERTtBQURkLFNBREssRUFRTDtBQUNFRixVQUFBQSxVQUFVLEVBQUU7QUFDVkMsWUFBQUEsTUFBTSxFQUFFO0FBQ05DLGNBQUFBLElBQUksRUFBRSxDQUFDLFVBQUQ7QUFEQSxhQURFO0FBSVZJLFlBQUFBLEdBQUcsRUFBRTtBQUNIUixjQUFBQSxJQUFJLEVBQUUsUUFESDtBQUVISCxjQUFBQSxLQUFLLEVBQUU7QUFGSjtBQUpLLFdBRGQ7QUFVRUksVUFBQUEsUUFBUSxFQUFFLENBQUMsS0FBRDtBQVZaLFNBUkssRUFvQkw7QUFDRUMsVUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLFlBQUFBLE1BQU0sRUFBRTtBQUNOQyxjQUFBQSxJQUFJLEVBQUUsQ0FBQyxVQUFEO0FBREEsYUFERTtBQUlWSyxZQUFBQSxPQUFPLEVBQUU7QUFDUFQsY0FBQUEsSUFBSSxFQUFFO0FBREM7QUFKQyxXQURkO0FBU0VDLFVBQUFBLFFBQVEsRUFBRSxDQUFDLFNBQUQ7QUFUWixTQXBCSztBQUREO0FBREk7QUFmSixHQUxHO0FBMERmUyxFQUFBQSxRQUFRLEVBQUUsRUExREs7QUE0RGZDLEVBQUFBLGtCQUFrQixFQUFFQyxRQUFRLElBQUssV0FBVUEsUUFBUSxDQUFDVCxNQUFPLEVBNUQ1QztBQTZEZmIsRUFBQUEsYUFBYSxFQUFFQSxhQTdEQTtBQThEZnVCLEVBQUFBLE1BQU0sRUFBRTtBQTlETyxDQUFqQiIsInNvdXJjZVJvb3QiOiIvVm9sdW1lcy9icC9ib3RwcmVzcy9tb2R1bGVzL2J1aWx0aW4vc3JjL2JhY2tlbmQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYXNlID0gcmVxdWlyZSgnLi9fYmFzZScpXG5cbmZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoZGF0YSwgY2hhbm5lbCkge1xuICAvLyBXZSBkb24ndCByZW5kZXIgYWN0aW9uIGJ1dHRvblxuICByZXR1cm4gW11cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlkOiAnYnVpbHRpbl9hY3Rpb24tYnV0dG9uJyxcbiAgZ3JvdXA6ICdCdWlsdC1pbiBNZXNzYWdlcycsXG4gIHRpdGxlOiAnQWN0aW9uIEJ1dHRvbicsXG5cbiAganNvblNjaGVtYToge1xuICAgIGRlc2NyaXB0aW9uOiAnQSBidXR0b24gdGhhdCB0cmlnZ2VycyBhbiBhY3Rpb24sIG9mdGVuIHVzZWQgaW4gY2FyZHMnLFxuICAgIHR5cGU6ICdvYmplY3QnLFxuICAgIHJlcXVpcmVkOiBbJ2FjdGlvbicsICd0aXRsZSddLFxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RpdGxlIG9mIHRoZSBidXR0b24nXG4gICAgICB9LFxuICAgICAgYWN0aW9uOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBlbnVtOiBbJ1NheSBzb21ldGhpbmcnLCAnT3BlbiBVUkwnLCAnUG9zdGJhY2snXSxcbiAgICAgICAgZGVmYXVsdDogJ1NheSBzb21ldGhpbmcnXG4gICAgICB9XG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IHtcbiAgICAgIGFjdGlvbjoge1xuICAgICAgICBvbmVPZjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgZW51bTogWydTYXkgc29tZXRoaW5nJ11cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICAgICAgICBlbnVtOiBbJ09wZW4gVVJMJ11cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdXJsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdFbnRlciBhIHZhbGlkIFVSTCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBbJ3VybCddXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgICAgICAgIGVudW06IFsnUG9zdGJhY2snXVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiBbJ3BheWxvYWQnXVxuICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB1aVNjaGVtYToge30sXG5cbiAgY29tcHV0ZVByZXZpZXdUZXh0OiBmb3JtRGF0YSA9PiBgQWN0aW9uOiAke2Zvcm1EYXRhLmFjdGlvbn1gLFxuICByZW5kZXJFbGVtZW50OiByZW5kZXJFbGVtZW50LFxuICBoaWRkZW46IHRydWVcbn1cbiJdfQ==